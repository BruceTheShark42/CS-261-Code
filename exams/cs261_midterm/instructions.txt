For this proficiency test you will write a program that works with a
doubly linked list.

File supplied.o contains code that can build, display, duplicate, and destroy
a doubly linked list. 

For this test, you will need to write the following functions in dlist.cpp,
add function prototypes for them to dlist.h and invoke the functions in
main.cpp. You should label the output of your test, such as "the list after
copy:" etc.

       int copyToArray(node * head, int intArray[])	
       
       Recursively copy all the integers in the list to intArray and return the
       number of int

       void reverseList(node *& head)	

       Recursively reverse the doubly linked list	

You must use the functions with these exact function prototypes. Don't forget the
supplied.o when generating the executable.

Run your program in valgrind and make sure there are no memory leaks. Assuming
the executable file is named "main" you can use the following command to check
for leaks:

valgrind --tool=memcheck --leak-check=full ./main

For test submission, use tar to combine your files into a single bundle:

tar cvf midterm.tar dlist.h dlist.cpp main.cpp

After that, use the 'turnin' program to turnin the tar file.

If you do not turn in ALL of your source files or if I'm unable to compile the
code you submit then you will receive a very low score on the final exam.

The grading criteria are:

5pts The program compiles
3pts The program runs without crashing or hanging
2pts No memory errors or memory leaks
5pts Correct functionality (2pts for copyToArray, 3pts for reverseList)
5pts Recursive implementation (2pts for copyToArray, 3pts for reverseList)

You can get partial credit so be sure to turn in whatever you have by the end
of the testing time period.


 

